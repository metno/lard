---
# find the other vm, that is not currently being iterated over (this will need to be changed if more than 2)
- name: Setting host facts for other_vm
  ansible.builtin.set_fact:
    other_vm: "{{ (ansible_play_hosts_all | difference([inventory_hostname])) | first }}"

- name: List other vm
  ansible.builtin.debug:
    msg: "{{ other_vm }}"

- name: Create user postgres
  ansible.builtin.user:
    name: postgres
    generate_ssh_key: true
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
    force: true
  register: ssh_keys
  become: true
# Another way to generate a ssh key...
# - name: Force regenerate an OpenSSH keypair if it already exists
#  community.crypto.openssh_keypair:
#    path: .ssh/id_rsa
#    force: true
#    owner: postgres # should be this user's key
#  register: ssh_keys
#  become: true

- name: List generated SSH key
  ansible.builtin.debug:
    msg: "{{ ssh_keys.ssh_public_key }}"

- name: Add the key to authorized_key on the other vm
  ansible.posix.authorized_key:
    user: postgres
    state: present
    key: "{{ ssh_keys.ssh_public_key }}"
  become: true
  delegate_to: "{{ other_vm }}"

- name: Get the host key
  ansible.builtin.set_fact:
    hostkey: "{{ ansible_ssh_host_key_ecdsa_public }}"

- name: List host key
  ansible.builtin.debug:
    msg: "{{ hostkey }}"

- name: List vm ip
  ansible.builtin.debug:
    msg: "{{ vm_ip }}"

- name: Add the vm to known_hosts on the other vm
  ansible.builtin.known_hosts:
    path: ~postgres/.ssh/known_hosts # need this for the postgres user
    name: "{{ vm_ip }}"
    key: "{{ vm_ip }} ecdsa-sha2-nistp256 {{ hostkey }}"
    state: present
  become: true
  delegate_to: "{{ other_vm }}"
