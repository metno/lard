---
# assume the db is already there and synched, so now want to turn into a standby / replica
# and want to turn the current standby into the primary
- name: Restart service postgres (primary)
  ansible.builtin.systemd_service:
    name: postgresql
    state: restarted
  become: true
  delegate_to: "{{ primary_ip }}"
  remote_user: ubuntu

# try to avoid issue: https://github.com/EnterpriseDB/repmgr/issues/703
- name: Restart service postgres (standby)
  ansible.builtin.systemd_service:
    name: postgresql
    state: restarted
  become: true
  delegate_to: "{{ standby_ip }}"
  remote_user: ubuntu

# can now just do this with repmgr
# https://www.repmgr.org/docs/current/preparing-for-switchover.html
# need the two instances to be able to ssh to each other!
# siblings-follow only really needed if have multiple standbys...
- name: Dry run of switching the standby and primary
  ansible.builtin.command: repmgr standby switchover -f /etc/repmgr.conf --siblings-follow --dry-run
  become: true
  become_user: postgres
  delegate_to: "{{ standby_ip }}"
  remote_user: ubuntu
  register: switchover_dry_run_results

- name: Print out the switchover_dry_run_results
  ansible.builtin.debug:
    msg: "repmgr {{ switchover_dry_run_results }}"
## see preparing for switchover if things go wrong despite dry run, there is mention of --force-rewind
## which would use pg_rewind to try to fix divergent timelines...

## https://www.repmgr.org/docs/current/switchover-execution.html
## https://www.repmgr.org/docs/current/switchover-troubleshooting.html
- name: Switch the standby and primary
  ansible.builtin.command: repmgr standby switchover -f /etc/repmgr.conf --siblings-follow
  become: true
  become_user: postgres
  delegate_to: "{{ standby_ip }}"
  remote_user: ubuntu
  register: switchover_results
- name: Print out the switchover_results
  ansible.builtin.debug:
    msg: "repmgr {{ switchover_results }}"

- name: Check cluster
  ansible.builtin.command: repmgr -f /etc/repmgr.conf cluster show
  become: true
  become_user: postgres
  delegate_to: "{{ standby_ip }}"
  remote_user: ubuntu
  register: status_results

- name: Print out the status_results
  ansible.builtin.debug:
    msg: "repmgr {{ status_results }}"
